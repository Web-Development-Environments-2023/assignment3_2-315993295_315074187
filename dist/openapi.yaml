openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths: # TODO - also change all "idk" 
  /recipes/{recipeId}: # Theirs
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /about: # Ours
  /register: # Theirs
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login: # Theirs
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description:
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout: # Theirs
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"  
  /search: # Ours
    post: # TODO: is it also get? See example of favorites
      tags:
      - search
      summary: search
      description: json object that contains search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
        required: true
      responses:
        "200":
          description: Result received.
        "400":
          description: Wrong parameters.
  /modal_creation: # Ours
    post:
      tags:
        - recipe    
      description: This path is used to input a recipe's details and create a new recipe in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Modal_Creation'
      responses:
        "201":
          description: Recipe created successfully.
        "400":
          description: Invalid request or parameters.
  /users/favorites: # Theirs
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "201":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/recipes: # Ours
  /users/familyrecipes: # Ours

components:
  schemas:
    User: # Theirs
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme: # Theirs
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          example: ladygaga
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          example: ladygaga2@
          format: password     
    RecipePreview: # Theirs
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    Search: # Ours
      type: object
      properties:
        Search_text:
          type: string
          description: The search string that will be used
          example: Simple potatoes in the oven
        Num_of_results:
          type: number
          description: "Integer, limited to 5, 10 or 15 (default 5). Used to specify the number of recipes to be returned."
          example: 10
          enum:
          - 5
          - 10
          - 15
        cuisnes:
          type: string
          description: "String of possible cuisine(s) of the recipes. Zero or more, comma separated (will be interpreted as 'OR'). "
          example: African,Asian,American
        diets:
          type: string
          description: "String of possible diet(s) for which the recipes must be suitable. You can specify multiple with comma meaning AND connection. You can specify multiple diets separated with a pipe | meaning OR connection. For example diet=gluten free,vegetarian means the recipes must be both, gluten free and vegetarian. If you specify diet=vegan|vegetarian, it means you want recipes that are vegan OR vegetarian."
          example: Gluten Free,Ketogenic
        intolerances:
          type: string
          description: "String representing a comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered."
          example: Egg
    Modal_Creation: # Ours
      type: object
      properties:
        Name:
          type: string
          description: The search string that will be used
          example: Simple potatoes in the oven
        Ingridients:
          type: array
          description: A list of all ingridients for the recipe.
          example: Three ounces of salt and a raw chicken
          items:
            type: string
        NumOfMeals:
          type: integer
          example: 2
        Instructions:
          type: array
          description: A list of all ingridients for the recipe.
          example: Shove it in the oven
          items:
            type: string
        Pic:
          type: string
          description: picture of the food
        Time:
          type: string
          description: how long it takes to make the meal
          example: 01:30
        Likes:
          type: integer
          description: How many likes the recipe get
        Vegan:
          type: boolean
          description: True if vegan
        GlutenFree:
          type: boolean
          description: True if Gluten Free
      description: recipe creation form
